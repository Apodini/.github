#
# This source file is part of the Apodini open source project
#
# SPDX-FileCopyrightText: 2021 Paul Schmiedmayer and the project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

name: Docker Build and Push

on:
  workflow_call:
    inputs:
      docker-file:
        description: 'Path or name of the Docker file. The default values is `Dockerfile`. The docker file can use the `baseimage` to get an architecture specific Swift base image'
        required: true
        type: string
        default: 'Dockerfile'
      image-name:
        description: 'The name used to tag the docker image on ghcr.io containing the organzation/account name and the name of the image, e.g.: apodini/example'
        required: true
        type: string
      working-directory:
        description: 'The working-directory of the GitHub Action. Defaults to $GITHUB_WORKSPACE'
        required: false
        type: string
        default: '.'

jobs:
  docker:
    name: Docker Build and Push Image ${{ matrix.architecture }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [arm64, amd64]
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get latest tag
        id: latesttag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: latest
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/${{ matrix.architecture }}
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ inputs.image-name }}
      - name: Log in to the container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine Base Image
        uses: haya14busa/action-cond@v1
        id: baseimage
        with:
          cond: ${{ matrix.architecture == 'arm64' }}
          if_true: 'swiftarm/swift:5.5.1-ubuntu-focal'
          if_false: 'swift:focal'
      - name: Build and push docker image
        id: buildandpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ ${{ inputs.docker-file }}
          build-args: |
            baseimage=${{ steps.baseimage.outputs.value }}
          push: true
          platforms: linux/${{ matrix.architecture }}
          tags: ghcr.io/${{ inputs.image-name }}:latest-${{ matrix.architecture }},ghcr.io/${{ inputs.image-name }}:${{ steps.latesttag.outputs.tag }}-${{ matrix.architecture }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.buildandpush.outputs.digest }}
  dockermanifest:
    needs: [docker]
    name: Create Multi-CPU Architecture Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get latest tag
        id: latesttag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: latest
      - name: Log in to the container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and Push Multi Architecture Image
        run: |
            docker manifest create ghcr.io/${{ inputs.image-name }}:latest \
              --amend ghcr.io/${{ inputs.image-name }}:latest-amd64 \
              --amend ghcr.io/${{ inputs.image-name }}:latest-arm64
            docker manifest create ghcr.io/${{ inputs.image-name }}:${{ steps.latesttag.outputs.tag }} \
              --amend ghcr.io/${{ inputs.image-name }}:${{ steps.latesttag.outputs.tag }}-amd64 \
              --amend ghcr.io/${{ inputs.image-name }}:${{ steps.latesttag.outputs.tag }}-arm64
            docker manifest push ghcr.io/${{ inputs.image-name }}:latest
            docker manifest push ghcr.io/${{ inputs.image-name }}:${{ steps.latesttag.outputs.tag }}
