#
# This source file is part of the Apodini open source project
#
# SPDX-FileCopyrightText: 2021 Paul Schmiedmayer and the project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

name: Build and Test

on:
  workflow_call:
    inputs:
      packagename:
        description: 'Name of the package e.g., passed ass the scheme to xcodebuild on macOS builds'
        required: true
        type: string
      xcodebuildpostfix:
        description: 'Testing code containing async/await on macOS 11 currently only works using xcodebuild. If you have multiple targets you need to add a postfix like "-Package" to the scheme to test using xcodebuild'
        required: false
        type: string
      aptgetdependencies:
        description: 'Dependencies that must be installed using apt-get before builds on Ubuntu'
        required: false
        type: string
      yumdependencies:
        description: 'Dependencies that must be installed using yum before builds on Amazon Linux and CentOS'
        required: false
        type: string

jobs:
  macos:
    name: macOS ${{ matrix.configuration }}
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release, release_testing]
    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1.4.0
      with:
        xcode-version: latest
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Release Build
      if: matrix.configuration == 'release'
      run: swift build -c release
    # - name: Release Build & Test
    #   if: matrix.configuration == 'release_testing'
    #   run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    # - name: Debug Build & Test
    #   if: matrix.configuration == 'debug'
    #   run: swift test -c debug --enable-code-coverage -Xswiftc -DCOVERAGE
    # - name: Convert coverage report
    #   if: matrix.configuration == 'debug'
    #   run: xcrun llvm-cov export -format="lcov" .build/debug/${{ inputs.packagename }}PackageTests.xctest/Contents/MacOS/${{ inputs.packagename }}PackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    - name: Release Build & Test using xcodebuild
      if: matrix.configuration == 'release_testing'
      run: xcodebuild -scheme ${{ inputs.packagename }}${{ inputs.xcodebuildpostfix }} -destination platform=macOS -configuration release 'OTHER_SWIFT_FLAGS=-enable-testing -D RELEASE_TEST' test
    - name: Debug Build & Test using xcodebuild
      if: matrix.configuration == 'debug'
      run: xcodebuild -scheme ${{ inputs.packagename }}${{ inputs.xcodebuildpostfix }} -destination platform=macOS -configuration debug -enableCodeCoverage YES -derivedDataPath ./.xcodebuild 'OTHER_SWIFT_FLAGS=-D COVERAGE' test
    - name: Convert coverage report after using xcodebuild
      if: matrix.configuration == 'debug'
      run: |
          XCTESTPATH=./.xcodebuild/Build/Products/debug/${{ inputs.packagename }}Tests.xctest/Contents/MacOS/${{ inputs.packagename }}Tests
          COVERAGEDATA=$(find ./.xcodebuild -type f -name "Coverage.profdata")
          xcrun llvm-cov export -format="lcov" $XCTESTPATH -instr-profile $COVERAGEDATA > coverage.lcov
    - name: Upload coverage to Codecov
      if: matrix.configuration == 'debug'
      uses: codecov/codecov-action@v2
    - name: Test Generating Docs
      if: matrix.configuration == 'debug'
      run: |
          xcodebuild docbuild -scheme ${{ inputs.packagename }} -destination platform=macOS -derivedDataPath ./.xcodebuild
          cp -r $(find ./.xcodebuild -type d -name '${{ inputs.packagename }}.doccarchive') ./${{ inputs.packagename }}.doccarchive
          echo "The DocC archive can be found at ./${{ inputs.packagename }}.doccarchive"
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }}
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [bionic, focal, amazonlinux2, centos8]
        configuration: [debug, release, release_testing]
    steps:
    - uses: actions/checkout@v2
    - name: Install apt-get Dependencies
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends ${{ inputs.aptgetdependencies }}
    - name: Install yum Dependencies
      if: ${{ startsWith( matrix.linux, 'amazonlinux' ) && inputs.yumdependencies != '' }}
      run: yum update -y && yum install -y ${{ inputs.yumdependencies }}
    - name: Install yum Dependencies
      if: ${{ startsWith( matrix.linux, 'centos' ) && inputs.yumdependencies != '' }}
      run: yum update -y --nobest && yum install -y ${{ inputs.yumdependencies }}
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Release Build
      if: matrix.configuration == 'release'
      run: swift build -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing'
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -c debug
