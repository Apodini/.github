#
# This source file is part of the Apodini open source project
#
# SPDX-FileCopyrightText: 2021 Paul Schmiedmayer and the project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

name: Build and Test

on:
  workflow_call:
    inputs:
      packagename:
        description: 'Name of the package passed to Xcode on macOS builds. Required for generating a test coverage or testing the DoC documentation generation'
        required: true
        type: string
      path:
        description: 'The path where the Swift Package is located. Defaults to $GITHUB_WORKSPACE'
        required: false
        type: string
        default: '.'
      supportsmacos11:
        description: 'Defines if the Swift Package supports macOS 11, the latest version currently available on GitHub Actions Virtual Environments'
        required: false
        type: boolean
        default: true
      test:
        description: 'A flag indicating if the Swift package contains tests'
        required: false
        type: boolean
        default: true
      testdocc:
        description: 'A flag indicating if the DocC documentation building should be tested'
        required: false
        type: boolean
        default: true
      aptgetdependencies:
        description: 'Dependencies that must be installed using apt-get before builds on Ubuntu'
        required: false
        type: string
      yumdependencies:
        description: 'Dependencies that must be installed using yum before builds on Amazon Linux and CentOS'
        required: false
        type: string
      installgrpcurl:
        description: 'A flag indicating if grpcurl should be installed'
        required: false
        type: boolean
        default: false
      homebrewdependencies:
        description: 'Dependencies that mus be installed using homebrew before builds on macOS'
        required: false
        type: string
      installprotoc:
        description: 'A flag indicating if protobuf compuler should be installed'
        required: false
        type: boolean
        default: false

jobs:
  macos:
    name: macOS ${{ matrix.configuration }}
    if: inputs.supportsmacos11
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release, release_testing]
    defaults:
      run:
        working-directory: ${{ inputs.path }}
    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest
    - name: Check Environment
      run: |
          xcodebuild -version
          swift --version
          echo "inputs.packagename: ${{ inputs.packagename }}"
          echo "inputs.path: ${{ inputs.path }}"
          echo "inputs.testdocc: ${{ inputs.testdocc }}"
          echo "matrix.configuration: ${{ matrix.configuration }}"
          echo "cache key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}"
    - name: Install grpcurl
      if: inputs.installgrpcurl
      run: brew install grpcurl
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}

    - name: Set up Homebrew
      if: inputs.homebrewdependencies != ''
      uses: Homebrew/actions/setup-homebrew@master
    - name: Install Homebrew dependencies
      if: inputs.homebrewdependencies != ''
      run: brew install ${{ inputs.homebrewdependencies }}

    - name: Release Build
      if: matrix.configuration == 'release'
      run: swift build -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing' && inputs.test
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug' && inputs.test
      run: swift test -c debug --enable-code-coverage -Xswiftc -DCOVERAGE
    - name: Convert coverage report
      if: matrix.configuration == 'debug' && inputs.test
      run: xcrun llvm-cov export -format="lcov" .build/debug/${{ inputs.packagename }}PackageTests.xctest/Contents/MacOS/${{ inputs.packagename }}PackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    - name: Upload coverage to Codecov
      if: matrix.configuration == 'debug' && inputs.test
      uses: codecov/codecov-action@v2
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }}
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [focal, amazonlinux2]
        configuration: [debug, release, release_testing]
    defaults:
      run:
        working-directory: ${{ inputs.path }}
    steps:
    - uses: actions/checkout@v2
    - name: Check Environment
      run: |
          swift --version
          echo "inputs.packagename: ${{ inputs.packagename }}"
          echo "inputs.path: ${{ inputs.path }}"
          echo "inputs.aptgetdependencies: ${{ inputs.aptgetdependencies }}"
          echo "inputs.yumdependencies: ${{ inputs.yumdependencies }}"
          echo "matrix.linux: ${{ matrix.linux }}"
          echo "matrix.configuration: ${{ matrix.configuration }}"
          echo "cache key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}"
    - name: Install apt-get Dependencies
      if: matrix.linux != 'centos8' && matrix.linux != 'amazonlinux2' && (inputs.aptgetdependencies != '' || inputs.installgrpcurl)
      run: apt-get update && apt-get install -y --no-install-recommends wget ${{ inputs.aptgetdependencies }}
    - name: Install yum Dependencies
      if: matrix.linux == 'amazonlinux2' && (inputs.yumdependencies != '' || inputs.installgrpcurl)
      run: yum update -y && yum install -y wget unzip ${{ inputs.yumdependencies }}
    - name: Install yum Dependencies
      if: matrix.linux == 'centos8' && (inputs.yumdependencies != '' || inputs.installgrpcurl)
      run: yum update -y --nobest && yum install -y wget unzip ${{ inputs.yumdependencies }}
    - name: Install grpcurl
      if: inputs.installgrpcurl
      run: |
        wget 'https://github.com/fullstorydev/grpcurl/releases/download/v1.8.5/grpcurl_1.8.5_linux_x86_64.tar.gz'
        tar -zxvf grpcurl_1.8.5_linux_x86_64.tar.gz grpcurl
        mv grpcurl /usr/local/bin/
    - name: Install protoc
      if: inputs.installprotoc
      run: |
        wget 'https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip'
        unzip protoc-3.19.4-linux-x86_64.zip
        mv bin/protoc /usr/local/bin
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}
    - name: Release Build
      if: matrix.configuration == 'release'
      run: swift build -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing' && inputs.test
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug' && inputs.test
      run: swift test -c debug
  generate-docs:
    name: Generate Docs
    if: inputs.testdocc == true
    runs-on: macos-11
    defaults:
      run:
        working-directory: ${{ inputs.path }}
    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest
    - name: Check Environment
      run: |
          xcodebuild -version
          swift --version
          echo "inputs.packagename: ${{ inputs.packagename }}"
          echo "inputs.path: ${{ inputs.path }}"
          echo "inputs.testdocc: ${{ inputs.testdocc }}"
          echo "cache key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}"
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
    - name: Test Generating Docs
      run: |
          rm -rf ~/.xcodebuild 
          mkdir ~/.xcodebuild
          xcodebuild docbuild -scheme ${{ inputs.packagename }} -destination platform=macOS -derivedDataPath ~/.xcodebuild
          cp -r $(find ~/.xcodebuild -type d -name '${{ inputs.packagename }}.doccarchive') ./${{ inputs.packagename }}.doccarchive
          echo "The DocC archive can be found at ./${{ inputs.packagename }}.doccarchive"
